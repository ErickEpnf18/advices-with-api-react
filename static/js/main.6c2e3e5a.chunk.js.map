{"version":3,"sources":["reportWebVitals.js","components/Testing.js","components/SuperAdvice.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Testing","advice","SuperAdvice","useState","setAdvice","loadingBtn","setLoadingBtn","search","setSearch","searchInfo","setSearchInfo","adviceFavorite","setAdviceFavorite","useEffect","getData","a","fetch","response","json","results","slip","res","respo","slips","handleAddFavorite","value","length","prevState","newAdvices","filter","className","id","onClick","map","item","index","newTodos","handleDeleteAdvice","name","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","console","log","onFinishFailed","errorInfo","autoComplete","Item","label","rules","required","message","type","htmlType","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c2e3e5a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst Testing = ({ advice }) => {\n  return (\n    <>\n      <p>{advice.advice}</p>\n    </>\n  );\n};\nTesting.propTypes = {\n  advice: PropTypes.shape({\n    advice: PropTypes.string,\n    id: PropTypes.number,\n  }),\n  key: PropTypes.number,\n};\nexport default Testing;\n","import React, { useState, useEffect } from \"react\";\nimport Testing from \"./Testing\";\n//import { PoweroffOutlined } from \"@ant-design/icons\";\nimport { Form, Button, Input } from \"antd\";\nimport \"../styles/Advice.css\";\nconst SuperAdvice = () => {\n  const [advice, setAdvice] = useState([]);\n  //const [access, setAccess] = useState(false);\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [searchInfo, setSearchInfo] = useState([]);\n  const [adviceFavorite, setAdviceFavorite] = useState([]);\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetch(`https://api.adviceslip.com/advice`);\n      const results = await response.json();\n      setAdvice(results.slip);\n    };\n    getData();\n  }, [loadingBtn]);\n  useEffect(() => {\n    const getData = async () => {\n      if (search !== \"\") {\n        const res =\n          await fetch(`https://api.adviceslip.com/advice/search/${search}\n        `);\n        const respo = await res.json();\n        setSearchInfo(respo.slips);\n      }\n    };\n    getData();\n  }, [search]);\n\n  function handleShowMe() {\n    setLoadingBtn(!loadingBtn);\n\n    /*\n    console.log(advice, \"advicehandleShowMe\", \" \", access);\n    i++;\n    i++;\n    console.log(\"ErickEpnf18\", i);\n    i++;\n    console.log(\"ErickEpnf18\", i);\n    // setAccess(!access);\n\n    console.log(advice, \"--advicehandleShowMe--\", \" \", access);\n\n     */\n  }\n  /*\n  const handleShowMeTime = () => {\n    setTimeout(handleShowMe, 1000);\n    clearTimeout(handleShowMe);\n  };*/\n\n  const handleSearch = (values) => {\n    console.log(\"values\", values.search);\n    setSearch(values.search);\n    console.log(searchInfo, \"searchInfo\");\n    //setSearchValues(values.search);\n    //setCurrentPage(1);\n  };\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"errorInfo:\", errorInfo);\n  };\n\n  const handleAddFavorite = (value) => {\n    if (adviceFavorite.length === 0) {\n      setAdviceFavorite((prevState) => [...prevState, value]);\n    } else {\n      const newAdvices = adviceFavorite.filter((advice) => advice === value);\n      if (newAdvices.length === 0) {\n        setAdviceFavorite((prevState) => [...prevState, value]);\n      }\n    }\n  };\n\n  const handleDeleteAdvice = (value) => {\n    const newTodos = adviceFavorite.filter((advice) => advice !== value);\n    setAdviceFavorite(newTodos);\n  };\n\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <h1>Concejos del día</h1>\n              <div className=\"container-advice\">\n                <div className=\"\">\n                  <div id=\"results\">\n                    {advice ? (\n                      <Testing advice={advice} key={advice.id} />\n                    ) : (\n                      \"no existe datos\"\n                    )}\n                  </div>\n                </div>\n                <div className=\"container-btn\">\n                  <button\n                    className=\"btn btn-primary\"\n                    onClick={() => handleAddFavorite(advice.advice)}\n                  >\n                    Marcar como favorita\n                  </button>\n                  <button className=\"btn btn-primary\" onClick={handleShowMe}>\n                    siguiente concejo\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"col\">\n              <h1>Consejos Favoritos</h1>\n              {adviceFavorite\n                ? adviceFavorite.map((item, index) => (\n                    <div key={index} className=\"container-favorite\">\n                      <div id=\"results\">\n                        <p key={index}>{item}</p>\n                      </div>\n                      <button\n                        className=\"btn btn-primary\"\n                        onClick={() => handleDeleteAdvice(item)}\n                      >\n                        eliminar concejo\n                      </button>\n                    </div>\n                  ))\n                : \"no existe datos\"}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <h1>Buscador de consejos</h1>\n              <div className=\"container-search\">\n                <Form\n                  className=\"container-form\"\n                  name=\"basic\"\n                  labelCol={{\n                    span: 8,\n                  }}\n                  wrapperCol={{\n                    span: 16,\n                  }}\n                  initialValues={{\n                    remember: true,\n                  }}\n                  onFinish={handleSearch}\n                  onFinishFailed={onFinishFailed}\n                  autoComplete=\"off\"\n                >\n                  <Form.Item\n                    label=\"Buscar Concejo:\"\n                    name=\"search\"\n                    rules={[\n                      {\n                        required: true,\n                        message: \"Ingrese el título de la busqueda\",\n                      },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n                  <Form.Item>\n                    <Button\n                      className=\"btn-advice\"\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                    >\n                      Buscar\n                    </Button>\n                  </Form.Item>\n                </Form>\n\n                {searchInfo\n                  ? searchInfo.map((item, index) => (\n                      <div key={index} className=\"container-search\">\n                        <p id=\"results\" key={index}>\n                          {item.advice}\n                        </p>{\" \"}\n                        <button\n                          className=\"btn btn-primary\"\n                          onClick={() => handleAddFavorite(item.advice)}\n                        >\n                          marcar como favorita\n                        </button>\n                      </div>\n                    ))\n                  : \"no existe coincidencia en la busqueda\"}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SuperAdvice;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/Favorite.css\";\n//import App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport SuperAdvice from \"./components/SuperAdvice\";\n\n//{/*<App />*/}\nReactDOM.render(\n  <React.StrictMode>\n    <SuperAdvice />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}